commit 219117d6cd64fb41909ee3ba78f54742c210566b
Author: eric <eric.zhong@amlogic.com>
Date:   Wed Aug 8 17:30:58 2012 +0800

    by peter: update wifi mac verification

diff --git a/drivers/amlogic/wifi/broadcm_40181/dhd_sdio.c b/drivers/amlogic/wifi/broadcm_40181/dhd_sdio.c
index 8167924..f6c8d90 100755
--- a/drivers/amlogic/wifi/broadcm_40181/dhd_sdio.c
+++ b/drivers/amlogic/wifi/broadcm_40181/dhd_sdio.c
@@ -965,47 +965,6 @@ dhd_enable_oob_intr(struct dhd_bus *bus, bool enable)
 }
 #endif /* defined(OOB_INTR_ONLY) */
 
-static int check = 1;
-static int
-dhdsdio_check(osl_t * osh, void *sdh) {
-	
-	uint fn=0;
-	uint8 *cis[SDIOD_MAX_IOFUNCS];
-	int err = 0;
-	uint magic_start = 0;
-	uint8 magic[3] = {0x00, 0x22, 0xF4};
-
-	check = 0;
-	if (!(cis[fn] = MALLOC(osh, SBSDIO_CIS_SIZE_LIMIT))) {
-		DHD_INFO(("dhdsdio_probe: fn %d cis malloc failed\n", fn));
-		goto fail;
-	}
-	bzero(cis[fn], SBSDIO_CIS_SIZE_LIMIT);
-
-	if ((err = bcmsdh_cis_read(sdh, fn, cis[fn], SBSDIO_CIS_SIZE_LIMIT))) {
-		DHD_INFO(("dhdsdio_probe: fn %d cis read err %d\n", fn, err));
-		MFREE(osh, cis[fn], SBSDIO_CIS_SIZE_LIMIT);
-		goto fail;
-	}
-	if (fn == 0) {
-		if (*(cis[fn]+4)==0x62 && *(cis[fn]+5)==0xa9)
-			magic_start = 33;
-		else if (*(cis[fn]+4)==0x30 && *(cis[fn]+5)==0x43)
-			magic_start = 33;
-		else if (*(cis[fn]+56)==0x29 && *(cis[fn]+57)==0x43)
-			magic_start = 71;
-		else if (*(cis[fn]+56)==0x19 && *(cis[fn]+57)==0x43)
-			magic_start = 71;
-		if ((err = memcmp((cis[fn]+magic_start), magic, sizeof(magic)))) {
-			goto fail;
-		}
-	}
-	return 0;
-fail:
-	check =1;
-	return 1;
-}
-
 /* Writes a HW/SW header into the packet and sends it. */
 /* Assumes: (a) header space already there, (b) caller holds lock */
 static int
@@ -1164,8 +1123,6 @@ dhdsdio_txpkt(dhd_bus_t *bus, void *pkt, uint chan, bool free_pkt)
 			bus->tx_seq = (bus->tx_seq + 1) % SDPCM_SEQUENCE_WRAP;
 		}
 	} while ((ret < 0) && retrydata && retries++ < TXRETRIES);
-	if (check==1)
-		msleep(100);
 
 done:
 	/* restore pkt buffer pointer before calling tx complete routine */
@@ -5434,7 +5391,6 @@ dhdsdio_probe(uint16 venid, uint16 devid, uint16 bus_no, uint16 slot,
 		DHD_ERROR(("%s: dhdsdio_probe_init failed\n", __FUNCTION__));
 		goto fail;
 	}
-	dhdsdio_check(osh, sdh);
 
 	if (bus->intr) {
 		/* Register interrupt callback, but mask it (not operational yet). */
@@ -5491,6 +5447,57 @@ fail:
 	return NULL;
 }
 
+static int
+dhdsdio_check(uint8 *cis)
+{
+	int ret = -1, i;
+	uint8 *ptr = 0;
+	unsigned char tpl_code, tpl_link;
+	uint8 mac_addr[3] = {0x00, 0x22, 0xF4};
+	
+	ptr = cis;
+	do {
+		/* 0xff means we're done */
+		tpl_code = *ptr;
+		ptr++;
+		if (tpl_code == 0xff)
+			break;
+
+		/* null entries have no link field or data */
+		if (tpl_code == 0x00)
+			continue;
+
+		tpl_link = *ptr;
+		ptr++;
+		/* a size of 0xff also means we're done */
+		if (tpl_link == 0xff)
+			break;
+		DHD_TRACE(("tpl_code=0x%02x, tpl_link=0x%02x, tag=0x%02x\n", tpl_code, tpl_link, *ptr));
+		DHD_TRACE(("value:"));
+		for (i=0; i<tpl_link-1; i++) {
+			if (i%16==0)
+				DHD_TRACE(("\n"));
+			DHD_TRACE(("%02x ", ptr[i+1]));
+		}
+		DHD_TRACE(("\n"));
+		
+
+		if (tpl_code == 0x80 && tpl_link == 0x07 && *ptr == 0x19)
+			break;
+
+		ptr += tpl_link;
+	} while (1);
+
+	if (tpl_code == 0x80 && tpl_link == 0x07 && *ptr == 0x19) {
+		if ((ret = memcmp((ptr+1), mac_addr, sizeof(mac_addr))))
+			DHD_ERROR(("%02X%02X%02X%02X%02X%02X\n",
+				*(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5), *(ptr+6)));
+	} else
+		DHD_ERROR(("NO MAC ADDRESS\n"));
+
+	return ret;
+}
+
 static bool
 dhdsdio_probe_attach(struct dhd_bus *bus, osl_t *osh, void *sdh, void *regsva,
                      uint16 devid)
@@ -5563,21 +5570,22 @@ dhdsdio_probe_attach(struct dhd_bus *bus, osl_t *osh, void *sdh, void *regsva,
 			dhd_dump_cis(fn, cis[fn]);
 #endif /* DHD_DEBUG */
 			if (fn == 0) {
-				if (*(cis[fn]+4)==0x62 && *(cis[fn]+5)==0xa9) {
-					mac_start = 33;
-				} else if (*(cis[fn]+4)==0x30 && *(cis[fn]+5)==0x43) {
-					mac_start = 33;
-				} else if (*(cis[fn]+56)==0x29 && *(cis[fn]+57)==0x43) {
-					mac_start = 71;
-				} else if (*(cis[fn]+56)==0x19 && *(cis[fn]+57)==0x43) {
-					mac_start = 71;
-				} else
-					DHD_ERROR(("Unknown module\n"));
-				if ((err = memcmp((cis[fn]+mac_start), mac_addr, sizeof(mac_addr)))) {
-					DHD_ERROR(("%02X%02X%02X%02X%02X%02X\n",
-						*(cis[fn]+mac_start+5), *(cis[fn]+mac_start+4), *(cis[fn]+mac_start+3),
-						*(cis[fn]+mac_start+2), *(cis[fn]+mac_start+1), *(cis[fn]+mac_start+0)));
-					break;
+				if ((err = dhdsdio_check(cis[fn]))) {
+					if (bcmsdh_reg_read(bus->sdh, SI_ENUM_BASE, 4) == 0x16044330) {
+						mac_start = 42;
+						if (*(cis[fn]+mac_start-3) == 0x80 &&
+							*(cis[fn]+mac_start-2) == 0x07 &&
+							*(cis[fn]+mac_start-1) == 0x19) {
+							if ((err = memcmp((cis[fn]+mac_start), mac_addr, sizeof(mac_addr)))) {
+								DHD_ERROR(("%02X%02X%02X%02X%02X%02X\n",
+									*(cis[fn]+mac_start+0), *(cis[fn]+mac_start+1),
+									*(cis[fn]+mac_start+2),	*(cis[fn]+mac_start+3),
+									*(cis[fn]+mac_start+4), *(cis[fn]+mac_start+5)));
+								break;
+							}
+						}
+					} else
+						break;
 				}
 #ifndef DHD_DEBUG
 				break;
