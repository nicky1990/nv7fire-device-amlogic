diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index 01ca20f..0ed8f06 100755
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -45,6 +45,8 @@
 #include "epautoconf.c"
 #include "composite.c"
 
+void adjust_gadget_wake_lock(struct wake_lock *wake_lock, int islock);
+
 #include "f_mass_storage.c"
 #include "u_serial.c"
 #include "f_acm.c"
@@ -172,6 +174,11 @@ static void android_work(struct work_struct *data)
 	else if (dev->connected != dev->sw_connected)
 		uevent_envp = dev->connected ? connected : disconnected;
 	dev->sw_connected = dev->connected;
+	if(!dev->connected)
+		adjust_gadget_wake_lock(&cdev->wake_lock,-1);
+	else if(uevent_envp == configured)
+		adjust_gadget_wake_lock(&cdev->wake_lock,is_adb_open()? 1:0);
+
 	spin_unlock_irqrestore(&cdev->lock, flags);
 
 	if (uevent_envp) {
@@ -183,7 +190,29 @@ static void android_work(struct work_struct *data)
 	}
 }
 
+/* adjust the wake_lock to change action for system suspend */
+void adjust_gadget_wake_lock(struct wake_lock *pwake_lock, int islock)
+{
+	struct usb_composite_dev *cdev = container_of(pwake_lock,struct usb_composite_dev,wake_lock);
+
+	/* if disconnect to pc, we should unlock the android lock */
+	if(islock == -1){
+		pr_info("%s unlock\n",__func__);
+		cdev->is_lock = 0;
+		wake_unlock(pwake_lock);
+		return;
+	}
 
+	if(!islock && cdev->is_lock && !--cdev->is_lock){
+		pr_info("%s unlock\n",__func__);
+		wake_unlock(pwake_lock);
+	}
+	else if(islock){
+		pr_info("%s lock\n",__func__);
+		wake_lock(pwake_lock);
+		cdev->is_lock++;
+	}
+}
 /*-------------------------------------------------------------------------*/
 /* Supported functions initialization */
 
@@ -1103,7 +1132,6 @@ static void android_disconnect(struct usb_gadget *gadget)
 	unsigned long flags;
 
 	composite_disconnect(gadget);
-
 	spin_lock_irqsave(&cdev->lock, flags);
 	dev->connected = 0;
 	schedule_work(&dev->work);
