diff --git a/sound/soc/codecs/rt5631.c b/sound/soc/codecs/rt5631.c
index 474614f..29e8373 100755
--- a/sound/soc/codecs/rt5631.c
+++ b/sound/soc/codecs/rt5631.c
@@ -31,10 +31,15 @@
 
 #include "rt5631.h"
 
+//struct mutex lock;
+static DEFINE_MUTEX(lock);
+
 #define ALC_FUNC 1
-#define EQ_FUNC 1
+#define EQ_FUNC 0 // 1
 static int ref_count = 0;
 
+unsigned int status_jdg=0;
+
 struct rt5631_init_reg {
     u8 reg;
     u16 val;
@@ -43,11 +48,13 @@ struct rt5631_init_reg {
 static struct rt5631_init_reg init_list[] = {
     {RT5631_SPK_OUT_VOL         , 0xc8c8},
     {RT5631_HP_OUT_VOL          , 0xc0c0},
-    {RT5631_MONO_AXO_1_2_VOL    , 0xa080},
+    {RT5631_MONO_AXO_1_2_VOL    , 0xe0c0},
     {RT5631_ADC_REC_MIXER       , 0xb0b0},
     {RT5631_MIC_CTRL_2          , 0x4400},
     {RT5631_OUTMIXER_L_CTRL     , 0xdfC0},
     {RT5631_OUTMIXER_R_CTRL     , 0xdfC0},
+    {RT5631_AXO1MIXER_CTRL		, 0x8860},	  
+    {RT5631_AXO2MIXER_CTRL      , 0x88A0},
     {RT5631_SPK_MIXER_CTRL      , 0xd8d8},
     {RT5631_SPK_MONO_OUT_CTRL   , 0x6c00},
     {RT5631_GEN_PUR_CTRL_REG    , 0x3e00},
@@ -57,6 +64,8 @@ static struct rt5631_init_reg init_list[] = {
     {RT5631_INDEX_ADD           , 0x45},   //roy 20120330 add for max HPO level
     {RT5631_INDEX_DATA          , 0x6530},
     {RT5631_ADC_REC_MIXER       , 0xa0a0},
+    {RT5631_INDEX_ADD           , 0x48},   //roy 20120330 add for spk OC test        
+    {RT5631_INDEX_DATA          , 0xF63A},
 #if ALC_FUNC
     //4-17 [s]
     {RT5631_ADC_CTRL_1      , 0x0005},      //Digital Preboost 7.5db
@@ -375,9 +384,8 @@ int rt5631_headset_detect(struct snd_soc_codec *codec, int jack_insert)
     int jack_type;
 
     if(jack_insert) {
-        snd_soc_update_bits(codec, RT5631_SPK_OUT_VOL,
-            RT5631_L_MUTE | RT5631_R_MUTE,
-            RT5631_L_MUTE | RT5631_R_MUTE);
+        snd_soc_update_bits(codec, RT5631_MONO_AXO_1_2_VOL,			
+			RT5631_L_MUTE ,RT5631_L_MUTE );
 
         snd_soc_update_bits(codec, RT5631_PWR_MANAG_ADD2,
             RT5631_PWR_MICBIAS1_VOL, RT5631_PWR_MICBIAS1_VOL);
@@ -413,9 +421,8 @@ int rt5631_headset_detect(struct snd_soc_codec *codec, int jack_insert)
         rt5631_hw_eq(codec, SPK_FR);
 #endif
 
-        snd_soc_update_bits(codec, RT5631_SPK_OUT_VOL,
-            RT5631_L_MUTE | RT5631_R_MUTE,
-            0);
+        snd_soc_update_bits(codec, RT5631_MONO_AXO_1_2_VOL,		
+        RT5631_L_MUTE ,0x0000 );
     }
 
     return jack_type;
@@ -1722,26 +1729,41 @@ static int rt5631_codec_digital_mute(struct snd_pcm_substream *substream,int mut
 		hp_pluged = rt5631_snd_pdata->hp_detect();
 	if(mute){
 		if(!hp_pluged){
-		snd_soc_update_bits(codec, RT5631_SPK_OUT_VOL,
-  
-		RT5631_L_MUTE | RT5631_R_MUTE,
-  
- 		RT5631_L_MUTE | RT5631_R_MUTE);
+			snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0x6848);
+			snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0x6f4f);
+			snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0x7858);
+			snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0xffdf);
+		//snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0xa0c0);
 		}else{
-     	snd_soc_update_bits(codec, RT5631_HP_OUT_VOL,
-         	RT5631_L_MUTE | RT5631_R_MUTE,
-         	RT5631_L_MUTE | RT5631_R_MUTE);
+		msleep(20);
+		snd_soc_write(codec,RT5631_HP_OUT_VOL,0x4545);
+		snd_soc_write(codec,RT5631_HP_OUT_VOL,0x5050);
+		snd_soc_write(codec,RT5631_HP_OUT_VOL,0x5f5f);
+		snd_soc_write(codec,RT5631_HP_OUT_VOL,0xcfcf);
+		msleep(80);
+		
 		}
 	}else{
 		if(!hp_pluged){
-		snd_soc_update_bits(codec, RT5631_SPK_OUT_VOL,
-			RT5631_L_MUTE | RT5631_R_MUTE, 0);
+			snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0x7858);
+			snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0xdf4f);
+			snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0x6848);
+			snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0x6040);
+			/*
+		snd_soc_write(codec,RT5631_MONO_AXO_1_2_VOL,0x60c0);
+		*/
 		}else{
-      		snd_soc_update_bits(codec, RT5631_HP_OUT_VOL,
-          	RT5631_L_MUTE | RT5631_R_MUTE, 0);
-		}
-	}
+			msleep(90);
+			snd_soc_write(codec,RT5631_HP_OUT_VOL,0xcfcf);
+			snd_soc_write(codec,RT5631_HP_OUT_VOL,0x5f5f);
+			snd_soc_write(codec,RT5631_HP_OUT_VOL,0x5050);
+			snd_soc_write(codec,RT5631_HP_OUT_VOL,0x4f4f);
+			snd_soc_write(codec,RT5631_HP_OUT_VOL,0x4040);
+		    msleep(20);
+		
+	    }
 	return 0;
+	}
 }
 
 static int rt5631_codec_shutdown(struct snd_pcm_substream * substream,
@@ -1749,9 +1771,50 @@ static int rt5631_codec_shutdown(struct snd_pcm_substream * substream,
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
     struct snd_soc_codec *codec = rtd->codec;
+	//unsigned int status_jdg;
+	//status_jdg = snd_soc_read(codec,RT5631_PWR_MANAG_ADD4);
+	/*if(status_jdg == 0x0000)
+	{
+	   // printk("******codec have shutdown***return*****\n");
+		return 0;
+	}
+	*/
+
+	
+	if(status_jdg == 1)
+	{
+		//printk("******codec have shutdown***return*****\n");
+		return 0;
+	}
+
+	struct device *pdev = codec->card->dev;
+	struct rt5631_platform_data *rt5631_snd_pdata;
+	
+	int hp_pluged;
+	rt5631_snd_pdata = pdev->platform_data;
+
+	if(rt5631_snd_pdata && rt5631_snd_pdata->hp_detect)
+		hp_pluged = rt5631_snd_pdata->hp_detect();
+
+	mutex_lock(&lock);
 	rt5631_codec_digital_mute(substream, 1);
+	snd_soc_write(codec, RT5631_PWR_MANAG_ADD4, 0x0000);
+	
+	snd_soc_write(codec, RT5631_OUTMIXER_L_CTRL, 0xffc0);
+	snd_soc_write(codec, RT5631_OUTMIXER_R_CTRL, 0xffc0);
+	
+	snd_soc_write(codec, RT5631_PWR_MANAG_ADD2, 0x0000);
 	snd_soc_write(codec, RT5631_PWR_MANAG_ADD1, 0x8300);
-	snd_soc_write(codec, RT5631_PWR_MANAG_ADD3, 0x0000);
+	if(hp_pluged)
+	{
+		snd_soc_write(codec, RT5631_PWR_MANAG_ADD3, 0xe000);
+	}
+	else
+	{
+		snd_soc_write(codec, RT5631_PWR_MANAG_ADD3, 0x0000);
+	}
+	mutex_unlock(&lock);
+	status_jdg=1;
 	return 0;
 }
 
@@ -1762,18 +1825,52 @@ static int rt5631_codec_startup(struct snd_pcm_substream * substream,
     struct snd_soc_codec *codec = rtd->codec;
 	struct device *pdev = codec->card->dev;
 	struct rt5631_platform_data *rt5631_snd_pdata;
+
+	/*unsigned int status_jdg;
+	status_jdg = snd_soc_read(codec,RT5631_PWR_MANAG_ADD1);
+	if(status_jdg == 0x9fe0)
+	{
+		//printk("******codec have startup***return*****\n");
+		return 0;
+	}
+	*/
 	int hp_pluged;
 	rt5631_snd_pdata = pdev->platform_data;
 	if(rt5631_snd_pdata && rt5631_snd_pdata->hp_detect)
 		hp_pluged = rt5631_snd_pdata->hp_detect();
+
+	
 	if(ref_count){
-		snd_soc_write(codec, RT5631_PWR_MANAG_ADD1, 0x9fe0);
+		if(status_jdg == 0)
+		{
+			//printk("******codec have startup***return*****\n");
+			return 0;
+		}
+		mutex_lock(&lock);
 		if(hp_pluged)
 			snd_soc_write(codec, RT5631_PWR_MANAG_ADD3, 0xe01e);
 		else{
-			snd_soc_write(codec, RT5631_PWR_MANAG_ADD3, 0xe000);
+			snd_soc_write(codec, RT5631_PWR_MANAG_ADD3, 0xe800);
+		}
+		
+		snd_soc_write(codec, RT5631_PWR_MANAG_ADD1, 0x9fe0);
+		snd_soc_write(codec, RT5631_PWR_MANAG_ADD2, 0xcc3c);
+
+		snd_soc_write(codec, RT5631_OUTMIXER_L_CTRL, 0xdfc0);
+		snd_soc_write(codec, RT5631_OUTMIXER_R_CTRL, 0xdfc0);
+
+		if(hp_pluged)
+		{
+			snd_soc_write(codec,RT5631_PWR_MANAG_ADD4,0x0c00);
+		}
+		else
+		{
+			snd_soc_write(codec, RT5631_PWR_MANAG_ADD4, 0x3000);
 		}
+		
 		rt5631_codec_digital_mute(substream, 0);
+		mutex_unlock(&lock);
+		status_jdg = 0;
 	}else{
 		rt5631_codec_shutdown(substream, dai);
 	}
