diff --git a/src/com/amlogic/HdmiSwitch/HdmiBroadcastReceiver.java b/src/com/amlogic/HdmiSwitch/HdmiBroadcastReceiver.java
index 46d888d..335f1e6 100755
--- a/src/com/amlogic/HdmiSwitch/HdmiBroadcastReceiver.java
+++ b/src/com/amlogic/HdmiSwitch/HdmiBroadcastReceiver.java
@@ -2,6 +2,7 @@ package com.amlogic.HdmiSwitch;
 
 import android.app.Notification;
 import android.app.NotificationManager;
+import android.app.KeyguardManager;
 import android.app.PendingIntent;
 import android.content.BroadcastReceiver;
 import android.content.Context;
@@ -11,6 +12,13 @@ import android.util.Log;
 import android.view.WindowManagerPolicy;
 import android.provider.Settings;
 import android.provider.Settings.SettingNotFoundException;
+import android.widget.Toast;
+
+import android.view.KeyEvent;
+import android.view.IWindowManager;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemClock;
 
 import java.io.File;
 import java.io.FileReader;
@@ -82,24 +90,106 @@ public class HdmiBroadcastReceiver extends BroadcastReceiver {
                 notification.setLatestEventInfo(context, context.getText(R.string.app_name), text, contentIntent);
 
                 nM.notify(HDMI_NOTIFICATIONS, notification);
+                onHdmiPlugged(context);
+                
             }else{
-                 if (!SystemProperties.getBoolean("ro.vout.dualdisplay", false)) {
-                     if (!HdmiSwitch.getCurMode().equals("panel")) {
-                        HdmiSwitch.setMode("panel");
-                        Intent it = new Intent(WindowManagerPolicy.ACTION_HDMI_PLUGGED);
-                        it.putExtra(WindowManagerPolicy.EXTRA_HDMI_PLUGGED_STATE, false);
-                        context.sendStickyBroadcast(it);
-                        if (SystemProperties.getBoolean("ro.vout.dualdisplay2", false)) {                        
-                            int dualEnabled = Settings.System.getInt(context.getContentResolver(),
-                                                    Settings.System.HDMI_DUAL_DISP, 1);
-                            HdmiSwitch.setDualDisplayStatic(plugged, (dualEnabled == 1));
-                        }                        
-                     }
-                 }
-                 NotificationManager nM = (NotificationManager) context.getSystemService(context.NOTIFICATION_SERVICE);
-                 nM.cancel(HDMI_NOTIFICATIONS); 
+                onHdmiUnplugged(context);
+                 
+                NotificationManager nM = (NotificationManager) context.getSystemService(context.NOTIFICATION_SERVICE);
+                nM.cancel(HDMI_NOTIFICATIONS); 
+            }
+        }
+    }
+    
+    
+    private void onHdmiPlugged(Context context) {
+        if (!SystemProperties.getBoolean("ro.vout.dualdisplay", false)) {
+            if (HdmiSwitch.getCurMode().equals("panel")) {
+                // camera in-use
+                String isCameraBusy = SystemProperties.get("camera.busy", "0");
+                if (!isCameraBusy.equals("0")) {
+                    Log.w(TAG, "onHdmiPlugged, camera is busy");
+                    Toast.makeText(context,
+                        context.getText(R.string.Toast_msg_camera_busy),
+                        Toast.LENGTH_LONG).show();                     
+                    return;
+                }
+                // keyguard on
+                KeyguardManager mKeyguardManager = (KeyguardManager) context.getSystemService(context.KEYGUARD_SERVICE); 
+        		if (mKeyguardManager != null && mKeyguardManager.inKeyguardRestrictedInputMode()) {
+        		    Log.w(TAG, "onHdmiPlugged, keyguard on");
+        			return;
+        		}
+        		
+                HdmiSwitch.setFb0Blank("1");
+                
+                /// send BACK key to stop other player
+                sendKeyEvent(KeyEvent.KEYCODE_HOME);                
+                
+                HdmiSwitch.setMode("720p");
+                Intent it = new Intent(WindowManagerPolicy.ACTION_HDMI_PLUGGED);
+                it.putExtra(WindowManagerPolicy.EXTRA_HDMI_PLUGGED_STATE, true);
+                context.sendStickyBroadcast(it);
+                if (SystemProperties.getBoolean("ro.vout.dualdisplay2", false)) {                        
+                    int dualEnabled = Settings.System.getInt(context.getContentResolver(),
+                                            Settings.System.HDMI_DUAL_DISP, 1);
+                    HdmiSwitch.setDualDisplayStatic(true, (dualEnabled == 1));
+                } 
+                HdmiSwitch.setFb0Blank("0");            
             }
         }
+    }    
+    
+    private void onHdmiUnplugged(Context context) {
+         if (!SystemProperties.getBoolean("ro.vout.dualdisplay", false)) {
+             if (!HdmiSwitch.getCurMode().equals("panel")) {
+                
+                /// 1. send broadcast to stop player
+//                Intent it = new Intent(WindowManagerPolicy.ACTION_HDMI_PLUGGED);
+//                it.putExtra(WindowManagerPolicy.EXTRA_HDMI_PLUGGED_STATE, false);
+//                context.sendStickyBroadcast(it);   
+                
+                /// 2. send BACK key to stop player
+                sendKeyEvent(KeyEvent.KEYCODE_HOME);
+                
+                /// 3. kill player
+           
+//                        HdmiSwitch.setMode("panel");
+//                        //Intent it = new Intent(WindowManagerPolicy.ACTION_HDMI_PLUGGED);
+//                        //it.putExtra(WindowManagerPolicy.EXTRA_HDMI_PLUGGED_STATE, false);
+//                        //context.sendStickyBroadcast(it);
+//                        if (SystemProperties.getBoolean("ro.vout.dualdisplay2", false)) {                        
+//                            int dualEnabled = Settings.System.getInt(context.getContentResolver(),
+//                                                    Settings.System.HDMI_DUAL_DISP, 1);
+//                            HdmiSwitch.setDualDisplayStatic(plugged, (dualEnabled == 1));
+//                        }       
+    			context.startService(new Intent(context, 
+    				HdmiDelayedService.class));                 
+             }
+         }    
+    }
+
+    /**
+     * Send a single key event.
+     *
+     * @param event is a string representing the keycode of the key event you
+     * want to execute.
+     */
+    private void sendKeyEvent(int keyCode) {
+        int eventCode = keyCode;
+        long now = SystemClock.uptimeMillis();
+        try {
+            KeyEvent down = new KeyEvent(now, now, KeyEvent.ACTION_DOWN, eventCode, 0);
+            KeyEvent up = new KeyEvent(now, now, KeyEvent.ACTION_UP, eventCode, 0);
+            (IWindowManager.Stub
+                .asInterface(ServiceManager.getService("window")))
+                .injectInputEventNoWait(down);
+            (IWindowManager.Stub
+                .asInterface(ServiceManager.getService("window")))
+                .injectInputEventNoWait(up);
+        } catch (RemoteException e) {
+            Log.i(TAG, "DeadOjbectException");
+        }
     }
 
 }
\ No newline at end of file
