diff --git a/recovery.c b/recovery.c
index 8bde57a..7613bf3 100755
--- a/recovery.c
+++ b/recovery.c
@@ -53,7 +53,7 @@ static const struct option OPTIONS[] = {
   { "wipe_data", no_argument, NULL, 'w' },
   { "wipe_cache", no_argument, NULL, 'c' },
   { "file_copy_from_partition", required_argument, NULL, 'z' },
-  { "file1_copy_from_partition", required_argument, NULL, 'y' },
+  { "copy_custom_files", required_argument, NULL, 'a' }, //add ainuo
 #ifdef RECOVERY_HAS_MEDIA
   { "wipe_media", no_argument, NULL, 'm' },
 #endif /* RECOVERY_HAS_MEDIA */
@@ -930,6 +930,177 @@ print_property(const char *key, const char *name, void *cookie) {
     printf("%s=%s\n", key, name);
 }
 
+//add ainuo
+char *dump_full_path(const char* path, const char* name)
+{
+    int path_len = strlen(path) + strlen(name);
+    path_len += 10;
+    char *path_full = malloc(path_len);
+    if (path_full) {
+        memset(path_full, 0, path_len);
+        strcpy(path_full, path);
+        strcat(path_full, "/");
+        strcat(path_full, name);
+    }
+
+    return path_full;
+}
+
+int copy_file(const char* file_dist, const char* file_src)
+{
+    int ret = 0;
+    // verify that SIDELOAD_TEMP_DIR is exactly what we expect: a
+    // directory, owned by root, readable and writable only by root.
+    struct stat st;
+    if (stat(file_src, &st) != 0) {
+        LOGE("failed to stat %s (%s)\n", file_src, strerror(errno));
+        return -1;
+    }
+   
+    if (!S_ISREG(st.st_mode)) {
+        LOGE("%s isn't a regular file\n", file_src);
+        return -1;
+    }
+
+    char* buffer = malloc(BUFSIZ);
+    if (buffer == NULL) {
+        LOGE("Failed to allocate buffer\n");
+        return -1;
+    }
+
+    size_t read;
+    FILE* fin = fopen(file_src, "rb");
+    if (fin == NULL) {
+        LOGE("Failed to open %s (%s)\n", file_src, strerror(errno));
+        ret = -1;
+        goto out1;
+    }
+   
+    FILE* fout = fopen(file_dist, "wb");
+    if (fout == NULL) {
+        LOGE("Failed to open %s (%s)\n", file_dist, strerror(errno));
+        ret = -1;
+        goto out1;
+    }
+
+    while ((read = fread(buffer, 1, BUFSIZ, fin)) > 0) {
+        if (fwrite(buffer, 1, read, fout) != read) {
+            LOGE("Short write of %s (%s)\n", file_dist, strerror(errno));
+            ret = -1;
+            goto out1;
+        }
+    }
+   
+out1:
+    free(buffer);
+
+    if ((fout != NULL) && fclose(fout) != 0) {
+        LOGE("Failed to close %s (%s)\n", file_dist, strerror(errno));
+    }
+
+    if ((fin != NULL) && fclose(fin) != 0) {
+        LOGE("Failed to close %s (%s)\n", file_src, strerror(errno));
+    }
+
+    if (chmod(file_dist, 0666) != 0) {
+        LOGE("Failed to chmod %s (%s)\n", file_dist, strerror(errno));
+        ret = -1;
+    }
+
+    return ret;
+}
+
+
+int copy_dir(const char* path_dist, const char* path_src)
+{
+    int ret = 0;
+    DIR* d;
+    struct dirent* de;
+    d = opendir(path_src);
+    if (d == NULL) {
+        LOGE("error opening %s: %s\n", path_src, strerror(errno));
+        return -1;
+    }
+
+    if (mkdir(path_dist, 0666) != 0) {
+        if (errno != EEXIST) {
+            LOGE("Can't mkdir %s (%s)\n", path_dist, strerror(errno));
+            return -1;
+        }
+    }
+
+    //ui_print("copy %s  to %s \n", path_src, path_dist);
+
+    while ((de = readdir(d)) != NULL) {
+        int name_len = strlen(de->d_name);
+
+        if (de->d_type == DT_DIR) {
+            // skip "." and ".." entries
+            if (name_len == 1 && de->d_name[0] == '.') continue;
+            if (name_len == 2 && de->d_name[0] == '.' &&
+                de->d_name[1] == '.') continue;
+
+           
+            char *path_dist_sub = dump_full_path(path_dist, de->d_name);
+            char *path_src_sub = dump_full_path(path_src, de->d_name);
+            if (path_dist_sub && path_src_sub) {
+                if ( copy_dir(path_dist_sub, path_src_sub) ) {
+                    ret = -1;
+                }
+            }
+           
+            if (path_dist_sub)
+                free(path_dist_sub);
+            if (path_src_sub)
+                free(path_src_sub);
+        } else if (de->d_type == DT_REG ) {
+       
+            char *file_dist = dump_full_path(path_dist, de->d_name);
+            char *file_src = dump_full_path(path_src, de->d_name);
+            if (file_dist && file_src) {
+                //ui_print("copy %s  to %s \n", file_src, file_dist);
+                if (copy_file(file_dist, file_src) < 0) {
+                    ret = -1;
+                    LOGE("Can't copy %s  to %s \n", file_src, file_dist);
+                }
+            }
+
+            if (file_dist)
+                free(file_dist);
+            if (file_src)
+                free(file_src);
+        }
+    }
+    closedir(d);
+
+    return ret;
+}
+
+
+int copy_custom_files(const char* path_dist, const char* path_src)
+{
+    if (ensure_path_mounted(path_dist) != 0) {
+        LOGE("Can't mount %s\n", path_dist);
+        return INSTALL_ERROR;
+    }
+
+    if (ensure_path_mounted(path_src) != 0) {
+        LOGE("Can't mount %s\n", path_src);
+        return INSTALL_ERROR;
+    }
+
+    if (copy_dir(path_dist, path_src) < 0)
+        return INSTALL_ERROR;
+    else
+        return INSTALL_SUCCESS;
+
+   
+}
+
+//add ainuo end
+
+
+
 int
 main(int argc, char **argv) {
     time_t start = time(NULL);
@@ -950,7 +1121,7 @@ main(int argc, char **argv) {
     const char *update_package = NULL;
     const char *update_patch = NULL;
 	const char *file_copy_from_partition_args = NULL;
-	const char *file1_copy_from_partition_args = NULL;
+	const char *copy_custom_files_dir = NULL; //add ainuo
     int wipe_data = 0, wipe_cache = 0;
     int reboot_to_factorymode = 0;
 #ifdef RECOVERY_HAS_MEDIA
@@ -969,15 +1140,15 @@ main(int argc, char **argv) {
     int arg;
     while ((arg = getopt_long(argc, argv, "", OPTIONS, NULL)) != -1) {
         switch (arg) {
+        case 'a': copy_custom_files_dir = optarg; break; //add ainuo
         case 'p': previous_runs = atoi(optarg); break;
         case 's': send_intent = optarg; break;
         case 'u': update_package = optarg; break;
-		case 'x': update_patch = optarg; break;
+	case 'x': update_patch = optarg; break;
         case 'w': wipe_data = wipe_cache = 1; break;
         case 'c': wipe_cache = 1; break;
         case 'f': reboot_to_factorymode = 1; break;
-		case 'z': file_copy_from_partition_args = optarg; break;
-		case 'y': file1_copy_from_partition_args = optarg; break;
+	case 'z': file_copy_from_partition_args = optarg; break;
 #ifdef RECOVERY_HAS_MEDIA
         case 'm': wipe_media = 1; break;
 #endif /* RECOVERY_HAS_MEDIA */
@@ -1036,47 +1207,24 @@ main(int argc, char **argv) {
 #endif
 #endif /* 0 */
 
-	char *file_path = NULL;
-	char *partition_type = NULL;
-	char *partition = NULL;
-	char *offset_str = NULL;
-	char *size_str = NULL;
-	ssize_t part_offset;
-	ssize_t file_size;
-
 	if(file_copy_from_partition_args)
 	{
+		char *file_path = NULL;
+		char *partition_type = NULL;
+		char *partition = NULL;
+		char *size_str = NULL;
+
 		if(((file_path = strtok(file_copy_from_partition_args, ":")) == NULL) ||
 			((partition_type = strtok(NULL, ":")) == NULL)	||
 			((partition = strtok(NULL, ":")) == NULL)	||
-			((offset_str = strtok(NULL, ":")) == NULL)	||
 			((size_str = strtok(NULL, ":")) == NULL))
 		{
 			printf("file_copy_from_partition_args Invalid!\n");
 		}
 		else
 		{
-			part_offset = atoi(offset_str);
-			file_size = atoi(size_str);
-			file_copy_from_partition(file_path, partition_type, partition, part_offset, file_size);
-		}	
-	}
-
-	if(file1_copy_from_partition_args)
-	{
-		if(((file_path = strtok(file1_copy_from_partition_args, ":")) == NULL) ||
-			((partition_type = strtok(NULL, ":")) == NULL)	||
-			((partition = strtok(NULL, ":")) == NULL)	||
-			((offset_str = strtok(NULL, ":")) == NULL)	||
-			((size_str = strtok(NULL, ":")) == NULL))
-		{
-			printf("file1_copy_from_partition_args Invalid!\n");
-		}
-		else
-		{
-			part_offset = atoi(offset_str);
-			file_size = atoi(size_str);
-			file_copy_from_partition(file_path, partition_type, partition, part_offset, file_size);
+			ssize_t file_size = atoi(size_str);
+			file_copy_from_partition(file_path, partition_type, partition, file_size);
 		}	
 	}
 
@@ -1108,97 +1256,62 @@ main(int argc, char **argv) {
                 LOGE("Cache wipe (requested by package) failed.");
             }
         }
-        if (status != INSTALL_SUCCESS)
-		{
-			ui_print("Installation aborted.\n");
-			goto process_failed;
-        }
+        if (status != INSTALL_SUCCESS) ui_print("Installation aborted.\n");
     }
 
     if (update_patch != NULL) {
         status = install_package(update_patch, &wipe_cache, TEMPORARY_INSTALL_FILE);
-        if (status != INSTALL_SUCCESS)
-		{
-			ui_print("Installation patch aborted.\n");
-			goto process_failed;
-		}
+        if (status != INSTALL_SUCCESS) ui_print("Installation patch aborted.\n");
     }
 	
     if (wipe_data) {
         if (device_wipe_data()) status = INSTALL_ERROR;
         if (erase_volume("/data")) status = INSTALL_ERROR;
         if (wipe_cache && erase_volume("/cache")) status = INSTALL_ERROR;
-        if (status != INSTALL_SUCCESS)
-		{
-			ui_print("Data wipe failed.\n");
-			goto process_failed;
-        }
+        if (status != INSTALL_SUCCESS) ui_print("Data wipe failed.\n");
     }
     
     if (wipe_cache) {
         if (wipe_cache && erase_volume("/cache")) status = INSTALL_ERROR;
-        if (status != INSTALL_SUCCESS)
-		{
-			ui_print("Cache wipe failed.\n");
-			goto process_failed;
-        }
+        if (status != INSTALL_SUCCESS) ui_print("Cache wipe failed.\n");
     }
     
 #ifdef RECOVERY_HAS_MEDIA
     if (wipe_media) {
         if (wipe_media && erase_volume(MEDIA_ROOT)) status = INSTALL_ERROR;
-        if (status != INSTALL_SUCCESS)
-		{
-			ui_print("Media wipe failed.\n");
-			goto process_failed;
-        }
+        if (status != INSTALL_SUCCESS) ui_print("Media wipe failed.\n");
     } 
 #endif /* RECOVERY_HAS_MEDIA */    
 //    else {
 //        status = INSTALL_ERROR;  // No command specified
 //    }
 
+    //add ainuo
+    if (copy_custom_files_dir != NULL) {
+        status = copy_custom_files(MEDIA_ROOT, copy_custom_files_dir);
+        if (status != INSTALL_SUCCESS) ui_print("Copy custom files failed.\n");
+    }
+
 #ifdef RECOVERY_HAS_EFUSE
     if (set_efuse_version) {
         status = recovery_efuse(EFUSE_VERSION, efuse_version);
-		if (status != INSTALL_SUCCESS)
-		{
-			ui_print("efuse write version failed.\n");
-			goto process_failed;
-        }
     }
 #ifdef EFUSE_LICENCE_ENABLE
     if (set_efuse_audio_license) {
         status = recovery_efuse(EFUSE_LICENCE, NULL);
-		if (status != INSTALL_SUCCESS)
-		{
-			ui_print("efuse write licence failed.\n");
-			goto process_failed;
-        }
     }
 #endif /* EFUSE_LICENCE_ENABLE */
 
     if (set_efuse_ethernet_mac) {
         status = recovery_efuse(EFUSE_MAC, NULL);
-		if (status != INSTALL_SUCCESS)
-		{
-			ui_print("efuse write MAC addr failed.\n");
-			goto process_failed;
-        }
     }
 
     if (set_efuse_bluetooth_mac) {
         status = recovery_efuse(EFUSE_MAC_BT, NULL);
-		if (status != INSTALL_SUCCESS)
-		{
-			ui_print("efuse write BT MAC failed.\n");
-			goto process_failed;
-        }
     }
 #endif /* RECOVERY_HAS_EFUSE */
 
-	int howReboot;
-process_failed:
+    int howReboot;
     if (status != INSTALL_SUCCESS) ui_set_background(BACKGROUND_ICON_ERROR);
     if (status != INSTALL_SUCCESS || ui_text_visible()) {
         ui_show_text(1);
@@ -1215,9 +1328,9 @@ process_failed:
 
     if (reboot_to_factorymode) {
         property_set("androidboot.mode", "factorytest");
-        android_reboot(ANDROID_RB_RESTART2, 0, "factory_testl_reboot");
+        android_reboot(ANDROID_RB_RESTART, 0, "factory_testl_reboot");
     } else {
-        android_reboot(ANDROID_RB_RESTART2, 0, "normal_reboot");
+        android_reboot(ANDROID_RB_RESTART, 0, 0);
     }
 
     return EXIT_SUCCESS;
