diff --git a/src/com/android/settings/DeviceInfoSettings.java b/src/com/android/settings/DeviceInfoSettings.java
index c25a466..87a2fe4 100644
--- a/src/com/android/settings/DeviceInfoSettings.java
+++ b/src/com/android/settings/DeviceInfoSettings.java
@@ -80,9 +80,9 @@ public class DeviceInfoSettings extends SettingsPreferenceFragment {
                 PROPERTY_URL_SAFETYLEGAL);
 
         // Remove Baseband version if wifi-only device
-        if (Utils.isWifiOnly(getActivity())) {
+        //if (Utils.isWifiOnly(getActivity())) {
             getPreferenceScreen().removePreference(findPreference(KEY_BASEBAND_VERSION));
-        }
+        //}
 
         /*
          * Settings is a generic app and should not contain any device-specific
diff --git a/src/com/android/settings/ModeSettings.java b/src/com/android/settings/ModeSettings.java
index 933dc40..6d4e192 100755
--- a/src/com/android/settings/ModeSettings.java
+++ b/src/com/android/settings/ModeSettings.java
@@ -44,6 +44,7 @@ import android.preference.Preference.OnPreferenceChangeListener;
 import android.provider.Settings;
 import android.text.TextUtils;
 import android.view.IWindowManager;
+import android.os.SystemProperties;
 
 import android.preference.PreferenceCategory;
 
@@ -54,7 +55,7 @@ import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.IOException;
 import android.util.Log;
-
+import java.util.StringTokenizer;
 
 /*
  * Displays preferences for application developers.
@@ -64,7 +65,7 @@ public class ModeSettings extends PreferenceFragment implements OnPreferenceChan
 
 	private static final String CPU_MODE_KEY = "cpu_mode";
 	private ListPreference mCpuMode;
-		
+    private String [] mMaxfreqList = new String[3];
     @Override
     public void onCreate(Bundle icicle) {
         super.onCreate(icicle);
@@ -85,16 +86,26 @@ public class ModeSettings extends PreferenceFragment implements OnPreferenceChan
     }
 
     private void initCpuModeValue() {
+        //load the max freq for different mode
+        String maxfreqstr = SystemProperties.get("ro.cpumode.maxfreq","1500000,1500000,800000");
+
+        // Use StringTokenizer because it is faster than split.
+        StringTokenizer tokenizer = new StringTokenizer(maxfreqstr,",");
+        int i = 0;
+        for(i=0;i<3;i++) {
+            mMaxfreqList[i] = tokenizer.nextToken();
+        }
+        
         if (mCpuMode != null) {
-            //String cpuModeStr = readSysfs(CPU_MODE_PATH, "conservative");
+            String cpuModeStr = readSysfs(CPU_MODE_PATH, "conservative");
             String maxFreqStr = readSysfs(CPU_MAX_FREQ_PATH, "1500000");
             int cpuMode = 0;
-            
-            if (maxFreqStr.equals("1200000"))
+
+            if ((maxFreqStr.equals(mMaxfreqList[0])) && (cpuModeStr.equals("conservative")))
                 cpuMode = 0;
-            else if (maxFreqStr.equals("1500000"))
+            if ((maxFreqStr.equals(mMaxfreqList[1]))&&(cpuModeStr.equals("performance")))
                 cpuMode = 1;
-            else if (maxFreqStr.equals("800000"))
+            else if ((maxFreqStr.equals(mMaxfreqList[2]))&&(cpuModeStr.equals("conservative")))
                 cpuMode = 2;
 
             Settings.System.putInt(getActivity().getContentResolver(), Settings.System.CPU_MODE,
@@ -163,13 +174,13 @@ public class ModeSettings extends PreferenceFragment implements OnPreferenceChan
                 
         if (cpuMode == 1) {
             writeSysfs(CPU_MODE_PATH, "performance");
-            writeSysfs(CPU_MAX_FREQ_PATH,"1500000");
+            writeSysfs(CPU_MAX_FREQ_PATH,mMaxfreqList[1]);
         } else if (cpuMode == 2) {
             writeSysfs(CPU_MODE_PATH, "conservative");
-            writeSysfs(CPU_MAX_FREQ_PATH,"800000");
+            writeSysfs(CPU_MAX_FREQ_PATH,mMaxfreqList[2]);
         } else {
             writeSysfs(CPU_MODE_PATH, "conservative");   
-            writeSysfs(CPU_MAX_FREQ_PATH,"1200000");
+            writeSysfs(CPU_MAX_FREQ_PATH,mMaxfreqList[0]);
         }
     }
 
